;; Ex 3.1
(define (make-accumulator acc)
  (lambda (x)
    (begin (set! acc (+ x acc)) acc)))

;; Ex 3.2
(define (make-monitored f)
  (define count 0)
  (define (mf x)
      (if (eq? x 'how-many-calls?) count
          (begin (set! count (1+ count))
                 (f x))))
  mf)

;; Ex 3.3
(define (make-account balance pass)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch p m)
    (cond ((not (eq? p pass)) (lambda (x) "Incorrect password"))
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: MAKE-ACCOUNT" m))))
  dispatch)

;; Ex 3.4
(define (make-account balance pass)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define attempts (make-accumulator 0))
  (define (attempts-made) (attempts 0))
  (define (reset-attempts) (attempts (- attempts)))
  (define (check-password? p)
    (cond ((eq? p pass) (reset-attempts) #t)
          (else (attempts 1) #f)))
  (define (dispatch p m)
    (cond ((not (check-password? p))
           (if (> (attempts-made) 7)
               (lambda (x) "The cops have been called!")
               (lambda (x) "Incorrect password")))
          ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request: MAKE-ACCOUNT" m))))
  dispatch)
